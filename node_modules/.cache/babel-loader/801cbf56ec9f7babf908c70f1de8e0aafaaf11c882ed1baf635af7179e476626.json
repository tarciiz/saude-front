{"ast":null,"code":"import { getUser } from './session';\n\n//const HOST = 'http://localhost:8083/'\nconst HOST = 'https://tarciiz-webserver-saude.loca.lt/';\nconst API = 'api/v1/app/';\nexport async function get(endpoint) {\n  try {\n    const fetched = await fetch(HOST + API + endpoint, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        \"Bypass-Tunnel-Reminder\": \"true\"\n      }\n    });\n    if (fetched.ok) {\n      const result = await fetched.json();\n      return result;\n    }\n    throw fetched;\n  } catch (error) {\n    // showMessage({message:error.type + ' - ' + error.status, type:'error'})\n    throw error;\n  }\n}\nexport async function get_params(endpoint, paramsMap) {\n  let params = Object.entries(paramsMap).map(a => a.join('='));\n  try {\n    let url = HOST + API + endpoint + '?' + params.join('&');\n    console.log('url', url);\n    const fetched = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        \"Bypass-Tunnel-Reminder\": \"true\"\n      }\n    });\n    console.log('fecthed ', fetched);\n    if (fetched.ok) {\n      const result = await fetched.json();\n      return result;\n    }\n    throw fetched;\n  } catch (error) {\n    console.log('Erro', error);\n    // showMessage({message:error.type + ' - ' + error.status, type:'error'})\n    throw error;\n  }\n}\nexport async function post(endpoint, body) {\n  try {\n    const fetched = await fetch(HOST + API + endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        \"Bypass-Tunnel-Reminder\": \"true\"\n      },\n      body: JSON.stringify(body)\n    });\n    if (fetched.ok) {\n      const result = await fetched.json();\n      return result;\n    }\n    throw fetched;\n  } catch (error) {\n    // showMessage({message:error.type + ' - ' + error.status, type:'error'})\n    throw error;\n  }\n}\nexport async function uploadFile(endpoint, file, pi) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"parentId\", pi);\n  try {\n    const response = await fetch(HOST + API + endpoint, {\n      method: \"POST\",\n      body: formData,\n      headers: {\n        \"Bypass-Tunnel-Reminder\": \"true\"\n      }\n    });\n    if (response.ok) {\n      const result = await response.json();\n      return result;\n    } else {\n      throw new Error(\"Failed to upload file\");\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}","map":{"version":3,"names":["getUser","HOST","API","get","endpoint","fetched","fetch","method","headers","ok","result","json","error","get_params","paramsMap","params","Object","entries","map","a","join","url","console","log","post","body","JSON","stringify","uploadFile","file","pi","formData","FormData","append","response","Error"],"sources":["C:/Users/sidta/OneDrive/Documentos/Projects/saÃºde/saude-front/src/config/requisitions.js"],"sourcesContent":["import {getUser} from './session';\r\n\r\n//const HOST = 'http://localhost:8083/'\r\nconst HOST = 'https://tarciiz-webserver-saude.loca.lt/'\r\n\r\nconst API = 'api/v1/app/'\r\n\r\nexport async function get(endpoint){\r\n    \r\n    try{\r\n        const fetched = await fetch(HOST+API+endpoint, {method:'GET', headers: {'Content-type': 'application/json', \"Bypass-Tunnel-Reminder\":\"true\"}})\r\n        \r\n        if (fetched.ok){\r\n            const result = await fetched.json();\r\n            \r\n            return result\r\n        }\r\n        throw fetched\r\n    }catch(error){\r\n        \r\n        // showMessage({message:error.type + ' - ' + error.status, type:'error'})\r\n        throw error\r\n    }\r\n}\r\n\r\nexport async function get_params(endpoint, paramsMap){\r\n    \r\n    let params = Object.entries(paramsMap).map(a => a.join('='));\r\n     try{\r\n        let url = HOST+API+endpoint+'?'+params.join('&')\r\n        console.log('url', url)\r\n         const fetched = await fetch(url, {method:'GET', headers: {'Content-type': 'application/json', \"Bypass-Tunnel-Reminder\":\"true\"}})\r\n         console.log('fecthed ', fetched)\r\n        \r\n        if (fetched.ok){\r\n            const result = await fetched.json();\r\n            \r\n            return result\r\n        }\r\n        throw fetched\r\n    }catch(error){\r\n        \r\n        console.log('Erro', error)\r\n        // showMessage({message:error.type + ' - ' + error.status, type:'error'})\r\n        throw error\r\n    }\r\n}\r\n\r\nexport async function post(endpoint, body){\r\n    \r\n    try{\r\n        const fetched = await fetch(HOST+API+endpoint, {method:'POST', headers: {'Content-type': 'application/json', \"Bypass-Tunnel-Reminder\":\"true\"}, body:JSON.stringify(body)})\r\n        \r\n        if (fetched.ok){\r\n            const result = await fetched.json();\r\n            \r\n            return result\r\n        }\r\n        throw fetched\r\n    }catch(error){\r\n        \r\n        // showMessage({message:error.type + ' - ' + error.status, type:'error'})\r\n        throw error\r\n    }\r\n}\r\n\r\nexport async function uploadFile(endpoint, file, pi) {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"parentId\", pi);\r\n    \r\n    try {\r\n      const response = await fetch(HOST+API+endpoint, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers:{\r\n            \"Bypass-Tunnel-Reminder\":\"true\"\r\n        }\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        return result;\r\n      } else {\r\n        throw new Error(\"Failed to upload file\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n        throw error\r\n\r\n    }\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}